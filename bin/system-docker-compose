#!/usr/bin/env bash
#
# Run docker-compose in a container
#
[ -z "$DEBUG" ] || set -x
set -o pipefail

# Main executable
DOCKER=${DOCKER:-/usr/bin/docker}
DOCKER_HOST="${DOCKER_HOST:-/var/run/docker.sock}"

# Folder with the compose file and variables files
COMPOSE_PROJECT_DIRECTORY="${COMPOSE_PROJECT_DIRECTORY:-/etc/docker-compose}"
# Name of the docker-compose project (by default is the name of the folder)
COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-system}"
# Disable the service
ENABLED="${ENABLED:-1}"
# Image to run
IMAGE="${IMAGE:-jriguera/dockercompose}"
# Extra docker options
OPTIONS="${OPTIONS:-}"
# Vars to pass to docker-compose
ENVVARS="DOCKER_HOST DOCKER_CERT_PATH DOCKER_TLS_VERIFY DOCKER_CLIENT_TIMEOUT COMPOSE_HTTP_TIMEOUT COMPOSE_PROJECT_NAME COMPOSE_FILE COMPOSE_PROJECT_DIRECTORY COMPOSE_API_VERSION"
# Extra volumes
VOLUMES="${VOLUMES:-}"
# Configuration file
ENV="${ENV:-config.env}"
# Load images
TARBALLS="${TARBALLS:-$COMPOSE_PROJECT_DIRECTORY/tarballs.lst}"
# M/Monit (set to empty to disable)
MONIT="${MONIT:-/usr/bin/monit}"
MONITCFG="${MONITCFG:-/etc/monit/conf.d/docker-compose}"


###


# Lock to avoid running multiple instances
singleton() {
    local lock="/var/run/$(basename ${BASH_SOURCE[0]})_${COMPOSE_PROJECT_NAME}"

    exec 222<>"${lock}"
    if ! flock -n -x 222
    then
        echo "It seems there is a lock file '${lock}', another process running with pid=$(cut -d' ' -f1 ${lock})"
        # If there is already an instance of this program running with the same action
        # argument, it is optimistic and exit with 0 (no error)
        if [ "x$(cut -d' ' -f2 ${lock})" == "x${1}" ]
        then
            echo "Wait for the other instance!. Exit 0."
            return 255
        fi
        echo "Error, another action is being performed right now!"
        return 1
    else
        trap "finish ${lock}" INT TERM KILL QUIT PIPE HUP EXIT
        # Write the pid and the arguments to the lock file
        echo "$$ ${@:1}" > "${lock}"
    fi
    return 0
}


finish() {
    local rvalue=$?
    local files=("${@}")

    trap "" EXIT
    for f in "${files[@]}"
    do
        rm -f "${f}"
    done
    exit ${rvalue}
}


# Create/delete monit conf and reload monit
manage_monit() {
    local action="${1}"
    shift
    local dockercompose="${@}"

    local services
    local service
    local rc

    if [ ! -x "${MONIT}" ] || [ -z "${MONITCFG}" ]
    then
        [ -r "${MONITCFG}" ] && rm -f "${MONITCFG}"
        echo "Monit management not enabled"
        return 0
    fi
    case "${action}" in
    start|reload)
        echo "Generating monit configuration ${MONITCFG} ... "
        # TODO
        if services=$(${dockercompose} run config --services 2>/dev/null)
        then
            echo "# Autogenerated file by $0 at $(date)" > "${MONITCFG}"
            for service in ${services}
            do
                cat >> "${MONITCFG}" <<-EOF
				check program docker.${service} with path "${DOCKER} top ${service}"
				if status != 0 for 3 cycles then alert
				if status != 0 for 6 cycles then exec "$(realpath ${BASH_SOURCE[0]}) reload"
				depends on dockerd
				group system
				group docker
				group docker-compose
				
				EOF
            done
        else
            echo "Error getting list of docker-compose services: ${dockercompose} run config --services"
            return 1
        fi
        ${MONIT} reload
        rc=$?
        sleep 5
    ;;
    stop)
        if [ -r "${MONITCFG}" ]
        then
            rm -f  "${MONITCFG}"
            ${MONIT} reload
            rc=$?
            sleep 5
        fi
    ;;
    esac
    return $rc
}


load_oci_images() {
    local fileimages="${1}"

    local image

    # Load OCI images
    if [ -r "${fileimages}" ]
    then
        echo "Loading OCI tarballs from ${fileimages} ..."
        while read -r image
        do
            echo "Loading ${image}"
            ${DOCKER} load --input "${image}"
        done <<< $(grep -v '^#' "${fileimages}")
    fi
}


start() {
    local cmd="${@}"

    local rc
    (
        echo "Starting/Reloading docker-compose ..."
        ${cmd} start
        rc=$?
        if [ ${rc} -eq 0 ]
        then
            manage_monit start "${cmd}"
            rc=$?
        fi
        exit ${rc}
    )
}


stop() {
    local cmd="${@}"

    local rc
    (
        manage_monit stop "${cmd}"
        echo "Stopping docker-compose ..."
        ${cmd} stop
        rc=$?
        exit ${rc}
    )
}


usage() {
    echo "Usage: $0 [-h] [-d <stackdir>]  [-c <env-settings-file>] [ start | stop | reload | status | top | run <docker-compose-arguments>]"
    echo "  Docker-compose wrapper to manage 'system' docker-compose stack in <stackdir> folder"
    echo "  Default <stackdir> folder: ${COMPOSE_PROJECT_DIRECTORY}"
    echo "  Settings in <stackdir> (${COMPOSE_PROJECT_DIRECTORY}): ${ENV}"
    echo "  Default docker-compose image: ${IMAGE}"
    echo "  Load local OCI tarballs list from ${TARBALLS}"
    echo
}


###

while getopts "hd:c:" OP
do
    case "${OP}" in
    h)
        usage "$(basename ${BASH_SOURCE[0]})"
        exit 0
        ;;
    d)
        COMPOSE_PROJECT_DIRECTORY=$(realpath "${OPTARG}")
        if [ ! -d "${COMPOSE_PROJECT_DIRECTORY}" ]
        then
            echo "Error, stack folder does not exist"
            exit 1
        fi
        ;;
    c)
        ENV="${OPTARG}"
        ;;
    *)
        break
        ;;
    esac
done
shift $((OPTIND-1))

# Load project folder settings (env)
[ -r "${COMPOSE_PROJECT_DIRECTORY}/${ENV}" ] && source "${COMPOSE_PROJECT_DIRECTORY}/${ENV}"

# Check if it is enabled
if [ "x${ENABLED}" != "x1" ]
then
    echo "Project ${COMPOSE_PROJECT_NAME} not enabled. See ${COMPOSE_PROJECT_DIRECTORY}/${ENV}. Exit 0."
    exit 0
fi

ADDR=""
if [ -S "${DOCKER_HOST}" ]
then
    ADDR="-v ${DOCKER_HOST}:${DOCKER_HOST}"
    unset DOCKER_HOST
fi

# Setup volume mounts for compose config and context
WORKDIR=/data/$(basename "${COMPOSE_PROJECT_DIRECTORY}")
VOLUMES="${VOLUMES} -v ${COMPOSE_PROJECT_DIRECTORY}:${WORKDIR}"
COMPOSE_PROJECT_DIRECTORY=${WORKDIR}

# Env vars
for var in ${ENVVARS}
do
    [ -z "${!var}" ] || OPTIONS="--env ${var}=${!var} ${OPTIONS}"
done

# Handle userns security
[ ! -z "$(${DOCKER} info 2>/dev/null | grep userns)" ] && OPTIONS="${OPTIONS} --userns=host"

# command line
CMD="${DOCKER} run --rm ${OPTIONS} ${ADDR} ${VOLUMES} -w ${WORKDIR} ${IMAGE}"
RC=0
case "${1}" in
    start)
        singleton ${@}
        RC=$?
        if [ ${RC} -eq 0 ]
        then
            # Load OCI images
            load_oci_images "${TARBALLS}"
            start "${CMD}"
            RC=$?
        elif [ ${RC} -eq 255 ]
        then
            # ignore
            RC=0
        fi
    ;;
    reload)
        singleton ${@}
        RC=$?
        [ ${RC} -eq 0 ] && {
            start "${CMD}"
            RC=$?
        }
        # ignore
        [ ${RC} -eq 255 ] && RC=0
    ;;
    stop)
        singleton ${@}
        RC=$?
        [ ${RC} -eq 0 ] && {
            stop "${CMD}"
            RC=$?
        }
        # ignore
        [ ${RC} -eq 255 ] && RC=0
    ;;
    run)
        shift
        singleton ${@}
        RC=$?
        [ ${RC} -eq 0 ] && {
            ${CMD} "$@"
        }
        # ignore
        [ ${RC} -eq 255 ] && RC=0
    ;;
    *)
        ${CMD} "$@"
        RC=$?
    ;;
esac
exit ${RC}


