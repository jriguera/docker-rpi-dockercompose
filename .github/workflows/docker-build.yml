# When an annotation commit is pushed, it publish the docker image to dockerhub
name: Docker build, release and push to DockerHub

on:
  push:
    paths:
    - 'docker/**'

env:
  RELEASE: dockercompose
  TITLE: "Docker image to run docker-compose as a systemd service"
  DOCKER_IMAGE_REPO: jriguera
  DOCKER_IMAGE_NAME: dockercompose
  DOCKER_BUILD_DIR: docker
  DOCKER_BUILD_PLATFORMS: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64

jobs:
  build-docker:
    name: Docker Build
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.docker.outputs.version }}
      name: ${{ steps.docker.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Docker build variables
        id: docker
        run: |
            MAINVERSION=$(sed -ne 's/^ARG.* VERSION=\(.*\)/\1/p' ${DOCKER_BUILD_DIR}/Dockerfile)
            MYVERSION=$(sed -ne 's/^ARG.* MYVERSION=\(.*\)/\1/p' docker/Dockerfile)
            VERSION="${MAINVERSION}-${MYVERSION}"
            TAG="${DOCKER_IMAGE_REPO}/${DOCKER_IMAGE_NAME}"
            TAGS="${TAG}:${VERSION}"
            GHTAGS="ghcr.io/${TAG}:${VERSION}"
            [[ ${GITHUB_REF} == refs/tags/* ]] && TAGS="${TAGS},${TAG}:latest" && GHTAGS="${GHTAGS},ghcr.io/${TAG}:latest"
            echo ::set-output name=name::${DOCKER_IMAGE_NAME}
            echo ::set-output name=builddir::${DOCKER_BUILD_DIR}
            echo ::set-output name=version::${VERSION}
            echo ::set-output name=tag::${TAG}
            echo ::set-output name=tags::${TAGS}
            echo ::set-output name=ghtags::${GHTAGS}
            echo ::set-output name=platforms::${DOCKER_BUILD_PLATFORMS}
            echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{steps.docker.outputs.platforms}}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          # sets docker build command as an alias to docker buildx
          install: false

      - name: Show Docker buildx available platforms
        run: |
          echo "QEMU platforms: ${{steps.qemu.outputs.platforms}}"
          echo "Docker buildx platforms: ${{steps.buildx.outputs.platforms}}"
          echo "Docker builder instance name: ${{steps.buildx.outputs.name}}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_GITHUB_REGISTRY_PAC }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}

      - name: Docker Build and push to GitHub Registry
        uses: docker/build-push-action@v2
        with:
          context: ${{steps.docker.outputs.builddir}}
          file: ${{steps.docker.outputs.builddir}}/Dockerfile
          platforms: ${{ steps.docker.outputs.platforms }}
          tags: ${{steps.docker.outputs.ghtags}}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.created=${{ steps.docker.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

      - name: Docker Build and push to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: ${{steps.docker.outputs.builddir}}
          file: ${{steps.docker.outputs.builddir}}/Dockerfile
          platforms: ${{ steps.docker.outputs.platforms }}
          push: ${{startsWith(github.ref, 'refs/tags/')}}
          tags: ${{steps.docker.outputs.tags}}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.created=${{ steps.docker.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}


