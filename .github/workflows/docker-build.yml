# When a commit is pushed with text matching v*, i.e. v1.0, v20.15.10, creates a new release
name: Docker build, release and push to DockerHub

on:
  push:
    tags:
    - '*'
    paths:
    - 'docker/**'

env:
  RELEASE: dockercompose
  TITLE: "Docker image to run docker-compose as a systemd service"
  DOCKER_IMAGE_REPO: jriguera
  DOCKER_IMAGE_NAME: dockercompose
  DOCKER_BUILD_DIR: docker
  DOCKER_BUILD_PLATFORMS: amd64,arm64,arm

jobs:
  build:
    name: Docker Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.docker.outputs.version }}
      name: ${{ steps.docker.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Docker build variables
        id: docker
        run: |
            MAINVERSION=$(sed -ne 's/^ARG.* VERSION=\(.*\)/\1/p' ${DOCKER_BUILD_DIR}/Dockerfile)
            MYVERSION=$(sed -ne 's/^ARG.* MYVERSION=\(.*\)/\1/p' docker/Dockerfile)
            VERSION="${MAINVERSION}-${MYVERSION}"
            TAG="${DOCKER_IMAGE_REPO}/${DOCKER_IMAGE_NAME}"
            TAGS="${TAG}:${VERSION}"
            [[ ${GITHUB_REF} == refs/tags/* ]] && TAGS="${TAGS},${TAG}:latest"
            echo ::set-output name=name::$(echo ${DOCKER_IMAGE_NAME})
            echo ::set-output name=builddir::$(echo ${DOCKER_BUILD_DIR})
            echo ::set-output name=version::$(echo ${VERSION})
            echo ::set-output name=tag::$(echo ${TAG})
            echo ::set-output name=tags::$(echo ${TAGS})
            echo ::set-output name=platforms::$(echo ${DOCKER_BUILD_PLATFORMS})
            echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{steps.docker.outputs.platforms}}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          # sets docker build command as an alias to docker buildx
          install: false

      - name: Show QEMU and Docker buildx available platforms
        run: |
          echo "QEMU platforms: ${{steps.qemu.outputs.platforms}}"
          echo "Docker buildx platforms: ${{steps.buildx.outputs.platforms}}"
          echo "Docker builder instance name: ${{steps.buildx.outputs.name}}"

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}

      - name: Docker Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{steps.docker.outputs.builddir}}
          file: ${{steps.docker.outputs.builddir}}/Dockerfile
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          push: ${{startsWith(github.ref, 'refs/tags/')}}
          tags: ${{steps.docker.outputs.tags}}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.created=${{ steps.docker.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

#  release:
#    name: Create Release
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0

#      - name: Set release variables
#        id: release
#        run: |
#            tag=$(git describe --abbrev=0 --tags)
#            prevtag=$(git describe --abbrev=0 --tags "${tag}^")
#            changes=$(git log --pretty="%h %aI %s (%an)" "${prevtag}..${tag}" | sed 's/^/- /')
#            cat <<EOF > description.md
#            # $RELEASE version ${{needs.build.outputs.version}} (build tag: ${tag})
#            
#            $TITLE
#            
#            ## Changes since last version
#            
#            $changes
#            
#            EOF
#            echo ::set-output name=description::$(cat description.md)
#            echo ::set-output name=release::$(echo ${RELEASE})
#            echo ::set-output name=name::$(echo ${TITLE} version ${{needs.build.outputs.version}})
#            echo ::set-output name=tag::$(echo ${tag})
# 
#      - name: Create Release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{steps.release.outputs.tag}}
#          release_name: ${{steps.release.outputs.name}}
#          body_path: description.md
#          draft: false
#          prerelease: false

